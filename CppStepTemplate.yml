# STEPS LEVEL TEMPLATE:
# Used to build XPlatCppSdk
# Reusable
# Used to "hide" the additional variables specific to this SDK which shouldn't be set from a higher level, or
#   shared from a multi-build pipeline like a publish

parameters:
- name: ApiSpecSource
  displayName: ApiSpecSource
  type: string
  default: -apiSpecGitUrl https://raw.githubusercontent.com/PlayFab/API_Specs/master/
- name: CommitMessage
  displayName: CommitMessage
  type: string
  default: Automated build from ADO Pipeline
- name: GitDestBranch
  displayName: GitDestBranch
  type: string
  default: doNotCommit
- name: SdkName
  displayName: SdkName
  type: string
  default: XPlatCppSdk
- name: GitJSetupBranch
  displayName: GitJSetupBranch
  type: string
  default: master
- name: GitSdkGenBranch
  displayName: GitSdkGenBranch
  type: string
  default: master
- name: SdkGenPrvTmplRepo
  displayName: SdkGenPrvTmplRepo
  type: string
  default: master
- name: isVersioned
  displayName: isVersioned
  type: boolean
  default: false
- name: BuildWindows
  displayName: BuildWindows
  type: boolean
  default: true
- name: TestWindows
  displayName: TestWindows
  type: boolean
  default: true
- name: SelfTemplateResource
  displayName: SelfTemplateResource
  type: string
  default: self

steps:
- checkout: JenkinsSdkSetupScripts
  clean: true
  path: s
- checkout: API_Specs
  clean: true
  path: s/API_Specs
- checkout: SdkGenerator
  clean: true
  path: s/SdkGenerator
- checkout: XPlatCoreTemplate
  clean: true
  path: s/SdkGenerator/privateTemplates/XPlatCoreTemplate
- checkout: ${{ parameters.SelfTemplateResource }}
  clean: true
  submodules: true
  path: s/sdks/XPlatCppSdk
  persistCredentials: true
- bash: |
    set -e
    echo alias the ADO variables into local variables
    ApiSpecSource="${{ parameters.ApiSpecSource }}"
    CommitMessage="${{ parameters.CommitMessage }}"
    GitDestBranch="${{ parameters.GitDestBranch }}"
    SdkGenPrvTmplRepo="${{ parameters.SdkGenPrvTmplRepo }}"
    SdkName="${{ parameters.SdkName }}"
    BuildWindows="${{ parameters.BuildWindows }}"
    TestWindows="${{ parameters.TestWindows }}"
    WORKSPACE=$(pwd -W)
    # Hack attempt to get WORKSPACE into a sub-environment
    export WORKSPACE="$WORKSPACE"
    
    #  . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/testInit.sh"
    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    . ./shared_build.sh
  displayName: 'SDKGenerate'

- powershell: |

    cd "JenkinsSdkSetupScripts\\JenkinsScripts\\Pipeline\"
    SyncSdkRepoSubmodules.bat
  displayName: 'SDK Submodule check'

- bash: |
    set -e
    echo alias the ADO variables into local variables
    ApiSpecSource="${{ parameters.ApiSpecSource }}"
    CommitMessage="${{ parameters.CommitMessage }}"
    GitDestBranch="${{ parameters.GitDestBranch }}"
    SdkGenPrvTmplRepo="${{ parameters.SdkGenPrvTmplRepo }}""
    SdkName="${{ parameters.SdkName }}"
    BuildWindows="${{ parameters.BuildWindows }}"
    TestWindows="${{ parameters.TestWindows }}"
    WORKSPACE=$(pwd -W)
    # Hack attempt to get WORKSPACE into a sub-environment
    export WORKSPACE="$WORKSPACE"
    
    . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/testInit.sh"
    
    cd "$WORKSPACE/SDKGenerator/SDKBuildScripts"
    export PF_TEST_TITLE_DATA_JSON="$WORKSPACE\JenkinsSdkSetupScripts\Creds\testTitleData.json"

    if [ $BuildWindows = true ] ;
    then
      echo === Build the XPlatCpp Project === 
      nuget restore "$WORKSPACE//sdks//$SdkName//build//Windows//XPlatCppWindows.sln"
      "$MSBUILD_EXE" "$WORKSPACE//sdks//$SdkName//build//Windows//TestClientApp.vcxproj" //p:configuration="Debug" //p:platform="x64" //t:Rebuild 
      "$MSBUILD_EXE" "$WORKSPACE//sdks//$SdkName//build//Windows//TestClientApp.vcxproj" //p:configuration="Release" //p:platform="x64" //t:Rebuild 
    fi
    
    nuget restore "$WORKSPACE//SDKGenerator//JenkinsConsoleUtility//JenkinsConsoleUtility.sln"
    "$MSBUILD_EXE" "$WORKSPACE//SDKGenerator//JenkinsConsoleUtility//JenkinsConsoleUtility.sln" //p:configuration="Debug" //p:platform="Any CPU" //t:Rebuild 

    if [ $TestWindows = true ] && [ $BuildWindows = true ] ;
    then
      echo === Test the Cpp Project === 
      "$WORKSPACE//sdks//$SdkName//build//Windows//x64//Release//TestClientApp//TestClientApp.exe"
      . "$WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/sdkUtil.sh"
      ListenCsJCU
    fi

    if [ $isVersioned = true ] ;
    then
      echo run JenkinsSdkSetupScripts publish nuget script
      cd $WORKSPACE/JenkinsSdkSetupScripts/JenkinsScripts/Pipeline/Publish/
      ./nugetpub.sh
    fi
  displayName: 'Build/Test/Report'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '*.xml'
    testRunTitle: CppTemplate
